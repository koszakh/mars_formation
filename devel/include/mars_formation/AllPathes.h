// Generated by gencpp from file mars_formation/AllPathes.msg
// DO NOT EDIT!


#ifndef MARS_FORMATION_MESSAGE_ALLPATHES_H
#define MARS_FORMATION_MESSAGE_ALLPATHES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mars_formation/Path.h>

namespace mars_formation
{
template <class ContainerAllocator>
struct AllPathes_
{
  typedef AllPathes_<ContainerAllocator> Type;

  AllPathes_()
    : paths_list()  {
    }
  AllPathes_(const ContainerAllocator& _alloc)
    : paths_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::mars_formation::Path_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mars_formation::Path_<ContainerAllocator> >::other >  _paths_list_type;
  _paths_list_type paths_list;





  typedef boost::shared_ptr< ::mars_formation::AllPathes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mars_formation::AllPathes_<ContainerAllocator> const> ConstPtr;

}; // struct AllPathes_

typedef ::mars_formation::AllPathes_<std::allocator<void> > AllPathes;

typedef boost::shared_ptr< ::mars_formation::AllPathes > AllPathesPtr;
typedef boost::shared_ptr< ::mars_formation::AllPathes const> AllPathesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mars_formation::AllPathes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mars_formation::AllPathes_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mars_formation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'mars_formation': ['/home/konst/mars_formation/src/mars_formation/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mars_formation::AllPathes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mars_formation::AllPathes_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mars_formation::AllPathes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mars_formation::AllPathes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mars_formation::AllPathes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mars_formation::AllPathes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mars_formation::AllPathes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b2a62638c1a94490c0dfa8d5e80347a";
  }

  static const char* value(const ::mars_formation::AllPathes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b2a62638c1a9449ULL;
  static const uint64_t static_value2 = 0x0c0dfa8d5e80347aULL;
};

template<class ContainerAllocator>
struct DataType< ::mars_formation::AllPathes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mars_formation/AllPathes";
  }

  static const char* value(const ::mars_formation::AllPathes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mars_formation::AllPathes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Path[] paths_list\n"
"================================================================================\n"
"MSG: mars_formation/Path\n"
"int32     platform_id\n"
"Point2d[] path_points\n"
"Point2d goal\n"
"Point2d final_orient_point\n"
"\n"
"================================================================================\n"
"MSG: mars_formation/Point2d\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::mars_formation::AllPathes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mars_formation::AllPathes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.paths_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AllPathes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mars_formation::AllPathes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mars_formation::AllPathes_<ContainerAllocator>& v)
  {
    s << indent << "paths_list[]" << std::endl;
    for (size_t i = 0; i < v.paths_list.size(); ++i)
    {
      s << indent << "  paths_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mars_formation::Path_<ContainerAllocator> >::stream(s, indent + "    ", v.paths_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARS_FORMATION_MESSAGE_ALLPATHES_H
